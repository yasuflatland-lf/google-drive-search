/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jp.liferay.google.drive.search.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import jp.liferay.google.drive.search.model.GoogleDriveSearch;
import jp.liferay.google.drive.search.model.GoogleDriveSearchModel;
import jp.liferay.google.drive.search.model.GoogleDriveSearchSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GoogleDriveSearch service. Represents a row in the &quot;GD_GoogleDriveSearch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link GoogleDriveSearchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GoogleDriveSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GoogleDriveSearchImpl
 * @see GoogleDriveSearch
 * @see GoogleDriveSearchModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GoogleDriveSearchModelImpl extends BaseModelImpl<GoogleDriveSearch>
	implements GoogleDriveSearchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a google drive search model instance should use the {@link GoogleDriveSearch} interface instead.
	 */
	public static final String TABLE_NAME = "GD_GoogleDriveSearch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "gdId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gdId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table GD_GoogleDriveSearch (uuid_ VARCHAR(75) null,gdId LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table GD_GoogleDriveSearch";
	public static final String ORDER_BY_JPQL = " ORDER BY googleDriveSearch.gdId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GD_GoogleDriveSearch.gdId ASC";
	public static final String DATA_SOURCE = "noDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(jp.liferay.google.drive.search.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.jp.liferay.google.drive.search.model.GoogleDriveSearch"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(jp.liferay.google.drive.search.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.jp.liferay.google.drive.search.model.GoogleDriveSearch"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(jp.liferay.google.drive.search.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.jp.liferay.google.drive.search.model.GoogleDriveSearch"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long GDID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GoogleDriveSearch toModel(GoogleDriveSearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GoogleDriveSearch model = new GoogleDriveSearchImpl();

		model.setUuid(soapModel.getUuid());
		model.setGdId(soapModel.getGdId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GoogleDriveSearch> toModels(
		GoogleDriveSearchSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GoogleDriveSearch> models = new ArrayList<GoogleDriveSearch>(soapModels.length);

		for (GoogleDriveSearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(jp.liferay.google.drive.search.service.util.ServiceProps.get(
				"lock.expiration.time.jp.liferay.google.drive.search.model.GoogleDriveSearch"));

	public GoogleDriveSearchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _gdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _gdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GoogleDriveSearch.class;
	}

	@Override
	public String getModelClassName() {
		return GoogleDriveSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("gdId", getGdId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long gdId = (Long)attributes.get("gdId");

		if (gdId != null) {
			setGdId(gdId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getGdId() {
		return _gdId;
	}

	@Override
	public void setGdId(long gdId) {
		_gdId = gdId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GoogleDriveSearch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GoogleDriveSearch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GoogleDriveSearch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GoogleDriveSearchImpl googleDriveSearchImpl = new GoogleDriveSearchImpl();

		googleDriveSearchImpl.setUuid(getUuid());
		googleDriveSearchImpl.setGdId(getGdId());

		googleDriveSearchImpl.resetOriginalValues();

		return googleDriveSearchImpl;
	}

	@Override
	public int compareTo(GoogleDriveSearch googleDriveSearch) {
		long primaryKey = googleDriveSearch.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GoogleDriveSearch)) {
			return false;
		}

		GoogleDriveSearch googleDriveSearch = (GoogleDriveSearch)obj;

		long primaryKey = googleDriveSearch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		GoogleDriveSearchModelImpl googleDriveSearchModelImpl = this;

		googleDriveSearchModelImpl._originalUuid = googleDriveSearchModelImpl._uuid;

		googleDriveSearchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GoogleDriveSearch> toCacheModel() {
		GoogleDriveSearchCacheModel googleDriveSearchCacheModel = new GoogleDriveSearchCacheModel();

		googleDriveSearchCacheModel.uuid = getUuid();

		String uuid = googleDriveSearchCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			googleDriveSearchCacheModel.uuid = null;
		}

		googleDriveSearchCacheModel.gdId = getGdId();

		return googleDriveSearchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", gdId=");
		sb.append(getGdId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("jp.liferay.google.drive.search.model.GoogleDriveSearch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gdId</column-name><column-value><![CDATA[");
		sb.append(getGdId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = GoogleDriveSearch.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			GoogleDriveSearch.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _gdId;
	private long _columnBitmask;
	private GoogleDriveSearch _escapedModel;
}