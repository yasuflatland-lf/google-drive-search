/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package jp.liferay.google.drive.search.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import jp.liferay.google.drive.search.model.GoogleDriveSearch;
import jp.liferay.google.drive.search.model.GoogleDriveSearchModel;
import jp.liferay.google.drive.search.model.GoogleDriveSearchSoap;

/**
 * The base model implementation for the GoogleDriveSearch service. Represents a row in the &quot;GD_GoogleDriveSearch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>GoogleDriveSearchModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GoogleDriveSearchImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GoogleDriveSearchImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class GoogleDriveSearchModelImpl
	extends BaseModelImpl<GoogleDriveSearch> implements GoogleDriveSearchModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a google drive search model instance should use the <code>GoogleDriveSearch</code> interface instead.
	 */
	public static final String TABLE_NAME = "GD_GoogleDriveSearch";

	public static final Object[][] TABLE_COLUMNS = {{"gdId", Types.BIGINT}};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("gdId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GD_GoogleDriveSearch (gdId LONG not null primary key)";

	public static final String TABLE_SQL_DROP =
		"drop table GD_GoogleDriveSearch";

	public static final String ORDER_BY_JPQL =
		" ORDER BY googleDriveSearch.gdId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GD_GoogleDriveSearch.gdId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		jp.liferay.google.drive.search.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.jp.liferay.google.drive.search.model.GoogleDriveSearch"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		jp.liferay.google.drive.search.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.jp.liferay.google.drive.search.model.GoogleDriveSearch"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GoogleDriveSearch toModel(GoogleDriveSearchSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GoogleDriveSearch model = new GoogleDriveSearchImpl();

		model.setGdId(soapModel.getGdId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GoogleDriveSearch> toModels(
		GoogleDriveSearchSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<GoogleDriveSearch> models = new ArrayList<GoogleDriveSearch>(
			soapModels.length);

		for (GoogleDriveSearchSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		jp.liferay.google.drive.search.service.util.ServiceProps.get(
			"lock.expiration.time.jp.liferay.google.drive.search.model.GoogleDriveSearch"));

	public GoogleDriveSearchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _gdId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGdId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _gdId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GoogleDriveSearch.class;
	}

	@Override
	public String getModelClassName() {
		return GoogleDriveSearch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GoogleDriveSearch, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GoogleDriveSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GoogleDriveSearch, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((GoogleDriveSearch)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GoogleDriveSearch, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GoogleDriveSearch, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GoogleDriveSearch)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GoogleDriveSearch, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GoogleDriveSearch, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GoogleDriveSearch, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GoogleDriveSearch, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GoogleDriveSearch, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<GoogleDriveSearch, Object>>();
		Map<String, BiConsumer<GoogleDriveSearch, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<GoogleDriveSearch, ?>>();

		attributeGetterFunctions.put(
			"gdId",
			new Function<GoogleDriveSearch, Object>() {

				@Override
				public Object apply(GoogleDriveSearch googleDriveSearch) {
					return googleDriveSearch.getGdId();
				}

			});
		attributeSetterBiConsumers.put(
			"gdId",
			new BiConsumer<GoogleDriveSearch, Object>() {

				@Override
				public void accept(
					GoogleDriveSearch googleDriveSearch, Object gdId) {

					googleDriveSearch.setGdId((Long)gdId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getGdId() {
		return _gdId;
	}

	@Override
	public void setGdId(long gdId) {
		_gdId = gdId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GoogleDriveSearch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GoogleDriveSearch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GoogleDriveSearch)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GoogleDriveSearchImpl googleDriveSearchImpl =
			new GoogleDriveSearchImpl();

		googleDriveSearchImpl.setGdId(getGdId());

		googleDriveSearchImpl.resetOriginalValues();

		return googleDriveSearchImpl;
	}

	@Override
	public int compareTo(GoogleDriveSearch googleDriveSearch) {
		long primaryKey = googleDriveSearch.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GoogleDriveSearch)) {
			return false;
		}

		GoogleDriveSearch googleDriveSearch = (GoogleDriveSearch)obj;

		long primaryKey = googleDriveSearch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GoogleDriveSearch> toCacheModel() {
		GoogleDriveSearchCacheModel googleDriveSearchCacheModel =
			new GoogleDriveSearchCacheModel();

		googleDriveSearchCacheModel.gdId = getGdId();

		return googleDriveSearchCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GoogleDriveSearch, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GoogleDriveSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GoogleDriveSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((GoogleDriveSearch)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GoogleDriveSearch, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GoogleDriveSearch, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GoogleDriveSearch, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GoogleDriveSearch)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		GoogleDriveSearch.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		GoogleDriveSearch.class, ModelWrapper.class
	};

	private long _gdId;
	private GoogleDriveSearch _escapedModel;

}